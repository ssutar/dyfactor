"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dyfactor_1 = require("dyfactor");
const mocks_1 = require("./utils/mocks");
QUnit.module('Modes');
const path = `${process.cwd()}/test/fixtures/project/app`;
QUnit.test('returns analyzer mode', assert => {
    let env = new dyfactor_1.Environment(new mocks_1.MockProject());
    let mode = dyfactor_1.modeFactory({ runtime: false }, 'modify', env, new mocks_1.MockPlugin(path, env));
    assert.ok(mode instanceof dyfactor_1.StaticModeImpl);
});
QUnit.test('returns data mode', assert => {
    let env = new dyfactor_1.Environment(new mocks_1.MockProject());
    let mode = dyfactor_1.modeFactory({ runtime: true }, 'extract', env, new mocks_1.MockPlugin(path, env));
    assert.ok(mode instanceof dyfactor_1.ExtractModeImpl);
});
QUnit.test('returns modify mode', assert => {
    let env = new dyfactor_1.Environment(new mocks_1.MockProject());
    let mode = dyfactor_1.modeFactory({ runtime: true }, 'modify', env, new mocks_1.MockPlugin(path, env));
    assert.ok(mode instanceof dyfactor_1.ModifyModeImpl);
});
QUnit.test('throws if unknown mode', assert => {
    let env = new dyfactor_1.Environment(new mocks_1.MockProject());
    assert.throws(() => {
        dyfactor_1.modeFactory({ runtime: true }, 'bongo', env, new mocks_1.MockPlugin(path, env));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZS10ZXN0LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zc3V0YXIvbGktc3JjL2R5ZmFjdG9yLyIsInNvdXJjZXMiOlsidGVzdC9tb2RlLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FNa0I7QUFDbEIseUNBQXdEO0FBRXhELEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFdEIsTUFBTSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDO0FBRTFELEtBQUssQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLEVBQUU7SUFDM0MsSUFBSSxHQUFHLEdBQUcsSUFBSSxzQkFBVyxDQUFDLElBQUksbUJBQVcsRUFBRSxDQUFDLENBQUM7SUFDN0MsSUFBSSxJQUFJLEdBQUcsc0JBQVcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksa0JBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyRixNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksWUFBWSx5QkFBYyxDQUFDLENBQUM7QUFDNUMsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxFQUFFO0lBQ3ZDLElBQUksR0FBRyxHQUFHLElBQUksc0JBQVcsQ0FBQyxJQUFJLG1CQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLElBQUksSUFBSSxHQUFHLHNCQUFXLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLGtCQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLFlBQVksMEJBQWUsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQyxDQUFDO0FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsRUFBRTtJQUN6QyxJQUFJLEdBQUcsR0FBRyxJQUFJLHNCQUFXLENBQUMsSUFBSSxtQkFBVyxFQUFFLENBQUMsQ0FBQztJQUM3QyxJQUFJLElBQUksR0FBRyxzQkFBVyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxrQkFBVSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLHlCQUFjLENBQUMsQ0FBQztBQUM1QyxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsTUFBTSxDQUFDLEVBQUU7SUFDNUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxzQkFBVyxDQUFDLElBQUksbUJBQVcsRUFBRSxDQUFDLENBQUM7SUFDN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDakIsc0JBQVcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksa0JBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRW52aXJvbm1lbnQsXG4gIEV4dHJhY3RNb2RlSW1wbCxcbiAgTW9kaWZ5TW9kZUltcGwsXG4gIFN0YXRpY01vZGVJbXBsLFxuICBtb2RlRmFjdG9yeVxufSBmcm9tICdkeWZhY3Rvcic7XG5pbXBvcnQgeyBNb2NrUGx1Z2luLCBNb2NrUHJvamVjdCB9IGZyb20gJy4vdXRpbHMvbW9ja3MnO1xuXG5RVW5pdC5tb2R1bGUoJ01vZGVzJyk7XG5cbmNvbnN0IHBhdGggPSBgJHtwcm9jZXNzLmN3ZCgpfS90ZXN0L2ZpeHR1cmVzL3Byb2plY3QvYXBwYDtcblxuUVVuaXQudGVzdCgncmV0dXJucyBhbmFseXplciBtb2RlJywgYXNzZXJ0ID0+IHtcbiAgbGV0IGVudiA9IG5ldyBFbnZpcm9ubWVudChuZXcgTW9ja1Byb2plY3QoKSk7XG4gIGxldCBtb2RlID0gbW9kZUZhY3RvcnkoeyBydW50aW1lOiBmYWxzZSB9LCAnbW9kaWZ5JywgZW52LCBuZXcgTW9ja1BsdWdpbihwYXRoLCBlbnYpKTtcbiAgYXNzZXJ0Lm9rKG1vZGUgaW5zdGFuY2VvZiBTdGF0aWNNb2RlSW1wbCk7XG59KTtcblxuUVVuaXQudGVzdCgncmV0dXJucyBkYXRhIG1vZGUnLCBhc3NlcnQgPT4ge1xuICBsZXQgZW52ID0gbmV3IEVudmlyb25tZW50KG5ldyBNb2NrUHJvamVjdCgpKTtcbiAgbGV0IG1vZGUgPSBtb2RlRmFjdG9yeSh7IHJ1bnRpbWU6IHRydWUgfSwgJ2V4dHJhY3QnLCBlbnYsIG5ldyBNb2NrUGx1Z2luKHBhdGgsIGVudikpO1xuICBhc3NlcnQub2sobW9kZSBpbnN0YW5jZW9mIEV4dHJhY3RNb2RlSW1wbCk7XG59KTtcblxuUVVuaXQudGVzdCgncmV0dXJucyBtb2RpZnkgbW9kZScsIGFzc2VydCA9PiB7XG4gIGxldCBlbnYgPSBuZXcgRW52aXJvbm1lbnQobmV3IE1vY2tQcm9qZWN0KCkpO1xuICBsZXQgbW9kZSA9IG1vZGVGYWN0b3J5KHsgcnVudGltZTogdHJ1ZSB9LCAnbW9kaWZ5JywgZW52LCBuZXcgTW9ja1BsdWdpbihwYXRoLCBlbnYpKTtcbiAgYXNzZXJ0Lm9rKG1vZGUgaW5zdGFuY2VvZiBNb2RpZnlNb2RlSW1wbCk7XG59KTtcblxuUVVuaXQudGVzdCgndGhyb3dzIGlmIHVua25vd24gbW9kZScsIGFzc2VydCA9PiB7XG4gIGxldCBlbnYgPSBuZXcgRW52aXJvbm1lbnQobmV3IE1vY2tQcm9qZWN0KCkpO1xuICBhc3NlcnQudGhyb3dzKCgpID0+IHtcbiAgICBtb2RlRmFjdG9yeSh7IHJ1bnRpbWU6IHRydWUgfSwgJ2JvbmdvJywgZW52LCBuZXcgTW9ja1BsdWdpbihwYXRoLCBlbnYpKTtcbiAgfSk7XG59KTtcbiJdfQ==